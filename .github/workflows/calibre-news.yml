name: Calibre News Delivery
run-name: 'Calibre News Delivery: ${{ github.ref_name }}'

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  worker:
    runs-on: ubuntu-latest
    environment: calibre-news
    env:
      output: converted_ebooks
      publisher: bookfere.com
      author: Calibre News Delivery
      ext: ${{ secrets.FORMAT || 'epub' }}
      size: ${{ secrets.SIZE || 25 }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          
      - name: Install Calibre
        run: |
          sudo apt-get update
          sudo apt-get install libegl1 libopengl0 libxcb-cursor0
          url=https://download.calibre-ebook.com/linux-installer.sh
          sudo -v && wget -nv -O- $url | sudo sh /dev/stdin
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Checking Recipe
        run: |
          declare -A recipe_paths
          add_recipe() {
            local name="$(basename "$recipe_path")"
            local key=$(echo "$name" | md5sum | cut -d ' ' -f 1)
            recipe_paths[$key]="$recipe_path"
          }
          if [ -f 'recipe_list.txt' ]; then
            while read recipe_path || [ -n "$recipe_path" ]; do
              if [ ! -n "$recipe_path" ]; then continue; fi
              title="${recipe_path%.recipe}"
              result="$(ebook-convert --list-recipes | grep "$title" || true)"
              if [ ! -n "$result" ]; then
                echo "Recipe \"$recipe_path\" does not exists"; continue
              fi
              if [ "${recipe_path##*.}" != 'recipe' ]; then
                recipe_path="$recipe_path".recipe
              fi
              add_recipe
            done < recipe_list.txt
          fi
          while read -d '' recipe_path; do
            add_recipe
          done < <(find . -maxdepth 1 -type f -name '*.recipe' -print0)
          for key in ${!recipe_paths[@]}; do
            recipe_path="${recipe_paths[$key]}"
            echo "Recipe path: $recipe_path"
            echo "$recipe_path" >> temp_recipe_list.txt
          done
          count=${#recipe_paths[@]}
          echo "Recipe count: $count"
          if [ $count -eq 0 ]; then
            echo 'No recipe needs processing'
            # ËøôÈáåÊîπ‰∏∫ÈÄÄÂá∫‰ª£Á†Å0ÔºåÂõ†‰∏∫Êâæ‰∏çÂà∞recipe‰∏çÊòØÈîôËØØ
            exit 0
          fi
            
      - name: Converting Ebook
        run: |
          set -e  # ÈÅáÂà∞ÈîôËØØÁ´ãÂç≥ÈÄÄÂá∫
          mkdir -p $output
          echo "ÂºÄÂßãÁîµÂ≠ê‰π¶ËΩ¨Êç¢..."
          
          # Ê∏ÖÁ©∫‰πãÂâçÁöÑËæìÂá∫
          rm -f $output/*.${ext,,} 2>/dev/null || true
          
          # ÁÆÄÂåñÁöÑËΩ¨Êç¢ÂáΩÊï∞
          convert_ebook() {
            local recipe_path="$1"
            local ebook_name=$(basename "${recipe_path%.*}")
            local output_file="$output/${ebook_name}.${ext,,}"
            
            echo "ËΩ¨Êç¢: $recipe_path -> $output_file"
            
            # ÊûÑÂª∫ÂèÇÊï∞Êï∞ÁªÑ
            local args=()
            args+=(--authors="$author")
            args+=(--publisher="$publisher")
            
            # Ê∑ªÂä†Â∞ÅÈù¢ÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
            local cover="covers/${ebook_name}.png"
            if [ -f "$cover" ]; then
              args+=(--cover="$cover")
            fi
            
            # Ê∑ªÂä†Ê†∑ÂºèÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
            local style="styles/${ebook_name}.css"
            if [ -f "$style" ]; then
              args+=(--extra-css="$style")
            fi
            
            # ÊâßË°åËΩ¨Êç¢
            if ebook-convert "$recipe_path" "$output_file" "${args[@]}"; then
              echo "‚úì ËΩ¨Êç¢ÊàêÂäü: $ebook_name"
              return 0
            else
              echo "‚úó ËΩ¨Êç¢Â§±Ë¥•: $ebook_name"
              # Ê∏ÖÁêÜÂ§±Ë¥•ÁöÑÊñá‰ª∂
              rm -f "$output_file" 2>/dev/null || true
              return 1
            fi
          }
          
          # Â§ÑÁêÜÊØè‰∏™recipe
          success_count=0
          failure_count=0
          
          if [ -f "temp_recipe_list.txt" ]; then
            while IFS= read -r recipe_path || [ -n "$recipe_path" ]; do
              if [ -n "$recipe_path" ] && [ -f "$recipe_path" ]; then
                if convert_ebook "$recipe_path"; then
                  ((success_count++))
                else
                  ((failure_count++))
                fi
              else
                echo "RecipeÊñá‰ª∂‰∏çÂ≠òÂú®: $recipe_path"
                ((failure_count++))
              fi
            done < "temp_recipe_list.txt"
          else
            echo "ÈîôËØØ: Êâæ‰∏çÂà∞temp_recipe_list.txtÊñá‰ª∂"
            # Â∞ùËØïÂ§ÑÁêÜÂΩìÂâçÁõÆÂΩï‰∏ãÁöÑÊâÄÊúârecipeÊñá‰ª∂
            for recipe in *.recipe; do
              if [ -f "$recipe" ]; then
                if convert_ebook "$recipe"; then
                  ((success_count++))
                else
                  ((failure_count++))
                fi
              fi
            done
          fi
          
          # ÁªüËÆ°ÂÆûÈôÖÁîüÊàêÁöÑÊñá‰ª∂
          actual_count=0
          if [ -d "$output" ]; then
            actual_count=$(find "$output" -maxdepth 1 -name "*.${ext,,}" -type f | wc -l)
          fi
          
          echo "=== ËΩ¨Êç¢ÊÄªÁªì ==="
          echo "ÊàêÂäü: $success_count"
          echo "Â§±Ë¥•: $failure_count"
          echo "ÂÆûÈôÖÁîüÊàêÁöÑÊñá‰ª∂Êï∞: $actual_count"
          
          # ÂàóÂá∫ÊâÄÊúâÁîüÊàêÁöÑÊñá‰ª∂
          if [ $actual_count -gt 0 ]; then
            echo "ÁîüÊàêÁöÑÁîµÂ≠ê‰π¶:"
            find "$output" -maxdepth 1 -name "*.${ext,,}" -type f | while read f; do
              echo "  - $(basename "$f") ($(du -h "$f" | cut -f1))"
            done
          else
            echo "Ê≤°ÊúâÁîüÊàê‰ªª‰ΩïÁîµÂ≠ê‰π¶"
          fi
          
          # ÂÖ≥ÈîÆ‰øÆÂ§çÔºöÂè™Ë¶ÅÊúâÊàêÂäüÁöÑËΩ¨Êç¢Â∞±ÁªßÁª≠ÔºåËÄå‰∏çÊòØÂ§±Ë¥•
          if [ $success_count -eq 0 ]; then
            echo 'ÊâÄÊúâÁîµÂ≠ê‰π¶ËΩ¨Êç¢ÈÉΩÂ§±Ë¥•‰∫Ü'
            exit 1
          else
            echo 'ÁîµÂ≠ê‰π¶ËΩ¨Êç¢ÂÆåÊàêÔºåÁªßÁª≠ÂêéÁª≠Ê≠•È™§'
            # ÊàêÂäüÂÆåÊàêÔºå‰∏çÈÄÄÂá∫ÔºàËÆ©ËÑöÊú¨Ëá™ÁÑ∂ÁªìÊùüÔºâ
          fi

      - name: Storing Ebook to Repository
        if: ${{ success() }}
        run: |
          # ÈÖçÁΩÆ Git Áî®Êà∑‰ø°ÊÅØ
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Ê£ÄÊü•ÊòØÂê¶ÊúâÊñá‰ª∂ÈúÄË¶ÅÊèê‰∫§
          if [ -n "$(git status --porcelain $output)" ]; then
            git add $output/
            git commit -m "üìö Add generated ebooks - $(date +%Y-%m-%d)"
            git push origin HEAD:${GITHUB_REF_NAME}
            echo "Â∑≤Êèê‰∫§Êõ¥Êîπ"
          else
            echo "Ê≤°ÊúâÊõ¥ÊîπÈúÄË¶ÅÊèê‰∫§"
          fi
          
      - name: Upload Artifact (Backup)
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: Calibre-News-Delivery
          path: ${{ env.output }}
          retention-days: ${{ secrets.DAYS || 90 }}
